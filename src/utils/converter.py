import os
from pathlib import Path
import shutil
from typing import List
import json
from tqdm import tqdm

from src.utils.constants import ACCEPTABLE_IMAGE_FORMATS
from src.utils.transforms import downscale_img
from src.utils.utilities import get_format_files


def batch_rescale_dir(src_dir: str,
                      target_dir: str = None,
                      file_format: List[str] = ACCEPTABLE_IMAGE_FORMATS):
    """
    Batch rescale all images in one directory, including in sub directories.

    Parameters
    ----------
    src_dir: Source directory where all images are stored, including child directories
    target_dir : If None, images are rescaled IN PLACE.  If specified moves all files over to the new die
    file_format: A list of type(str) with the format i.e. [".png", ".jpg"]

    Returns
    -------

    """
    src_dir = Path(src_dir)
    if target_dir is None:
        save_dir = src_dir
    else:
        save_dir = Path(target_dir)

    if save_dir.exists():
        print('Directory exists, overwriting contents')
    else:
        save_dir.mkdir(parents=True, exist_ok=True)
        print(f'Saving to directory {save_dir}')

    files = get_format_files(src_dir, file_format)
    print(f"{len(files)} Files found. Rescaling to {save_dir}")
    for f in tqdm(files):
        img = downscale_img(f)
        if target_dir is None:
            img.save(f)
        else:
            img.save(save_dir / (f.parent.name + "_" + f.stem + ".png"), "png")
    print(f"{len(files)} Files moved.")


def convert_label_studio(item: dict, save_dir:Path=None):
    """

    Parameters
    ----------
    item : An item in the label studio format json
    save_dir: Directory to save to. If none, creates a folder called labels in the working directory.
    If the folder already exists, overwrites the existing contents.

    Returns
    -------
    None
    """
    if save_dir is None:
        save_dir = Path(os.getcwd()) / 'labels'
        save_dir.mkdir(exist_ok=True)

    annotations = parse_label_studio(item)
    # with open(save_dir / annotations)
    # json.dump()


def parse_label_studio(item: dict)->dict:
    """
    Parse a label studio  item
    Parameters
    ----------
    item

    Returns
    -------

    """
    annotations = item["annotations"]
    file_name = item["file_upload"]

    if len(annotations) > 1:
        raise IndexError("Length of annotations list more than 1")

    results = {"keypoints":{}, "file_name": file_name}

    for idx, res in enumerate(item["annotations"][0]["result"]):
        if idx == 0:
            results["original_height"] = res["original_height"]
            results["original_width"] = res["original_width"]
        results["keypoints"][res["value"]["keypointlabels"][0]] = {
            "x": res["value"]["x"],
            "y": res["value"]["y"],
            "width": res["value"]["width"]
        }
    return results


def batch_convert_labels(img_dir: str, label_path: str):
    """
    Parses the .json generated by label studio into individual .json files.

    Parameters
    ----------
    img_dir
    label_path

    Returns
    -------

    """
    img_dir = Path(img_dir)
    label_path = Path(label_path)

    if (not img_dir.exists()) and (not label_path.exists()):
        raise FileNotFoundError

    with open(label_path) as f:
        labels = json.load(f)

    img_files = get_format_files(img_dir)
    _img_names_idxs = [f.stem for f in img_files]

    if len(img_files) != len(labels):
        raise Warning("The number of images and the number of entries in the json do not match. We will"
                      "try and perform the matching the best way we can")
    label_dir = img_dir / "labels"
    label_dir.mkdir(exist_ok=True)
    for label in tqdm(labels):
        _json_label = parse_label_studio(label)
        fname = label_dir / (_json_label["file_name"].split(".")[0] + ".json")
        with open(fname,"w+") as f:
            json.dump(_json_label, f)

if __name__ == "__main__":
    batch_convert_labels("dataset/experiments/15Apr", "dataset/experiments/15Apr/project-2-at-2022-04-17-13-30-087cae08.json")
    # with open("dataset/experiments/15Apr/project-2-at-2022-04-15-13-47-a248a230.json") as f:
    #     objs = json.load(f)
    # for f in objs:
    #     f["file_upload"] = f["file_upload"] + ".png"
    #
    # with open("dataset/experiments/15Apr/project-2-at-2022-04-15-13-47-a248a230.json", 'w+') as f:
    #     json.dump(objs, f)
        # convert_label_studio(json.load(f)[0], Path("dataset/experiments/15Apr/"))
    # batch_rescale_dir("../images_microscopy", target_dir="image_train")
